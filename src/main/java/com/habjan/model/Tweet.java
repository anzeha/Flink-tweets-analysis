/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.habjan.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9100854696059912903L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"com.habjan.model\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"created_at\",\"type\":\"string\"},{\"name\":\"user_id\",\"type\":\"long\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"quote_count\",\"type\":\"int\"},{\"name\":\"reply_count\",\"type\":\"int\"},{\"name\":\"retweet_count\",\"type\":\"int\"},{\"name\":\"favorite_count\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tweet> ENCODER =
      new BinaryMessageEncoder<Tweet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tweet> DECODER =
      new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Tweet> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Tweet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Tweet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Tweet to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Tweet from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Tweet instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Tweet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public java.lang.CharSequence created_at;
  @Deprecated public long user_id;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.CharSequence text;
  @Deprecated public int quote_count;
  @Deprecated public int reply_count;
  @Deprecated public int retweet_count;
  @Deprecated public int favorite_count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param created_at The new value for created_at
   * @param user_id The new value for user_id
   * @param username The new value for username
   * @param text The new value for text
   * @param quote_count The new value for quote_count
   * @param reply_count The new value for reply_count
   * @param retweet_count The new value for retweet_count
   * @param favorite_count The new value for favorite_count
   */
  public Tweet(java.lang.Long id, java.lang.CharSequence created_at, java.lang.Long user_id, java.lang.CharSequence username, java.lang.CharSequence text, java.lang.Integer quote_count, java.lang.Integer reply_count, java.lang.Integer retweet_count, java.lang.Integer favorite_count) {
    this.id = id;
    this.created_at = created_at;
    this.user_id = user_id;
    this.username = username;
    this.text = text;
    this.quote_count = quote_count;
    this.reply_count = reply_count;
    this.retweet_count = retweet_count;
    this.favorite_count = favorite_count;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return created_at;
    case 2: return user_id;
    case 3: return username;
    case 4: return text;
    case 5: return quote_count;
    case 6: return reply_count;
    case 7: return retweet_count;
    case 8: return favorite_count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: created_at = (java.lang.CharSequence)value$; break;
    case 2: user_id = (java.lang.Long)value$; break;
    case 3: username = (java.lang.CharSequence)value$; break;
    case 4: text = (java.lang.CharSequence)value$; break;
    case 5: quote_count = (java.lang.Integer)value$; break;
    case 6: reply_count = (java.lang.Integer)value$; break;
    case 7: retweet_count = (java.lang.Integer)value$; break;
    case 8: favorite_count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public long getUserId() {
    return user_id;
  }


  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'text' field.
   * @return The value of the 'text' field.
   */
  public java.lang.CharSequence getText() {
    return text;
  }


  /**
   * Sets the value of the 'text' field.
   * @param value the value to set.
   */
  public void setText(java.lang.CharSequence value) {
    this.text = value;
  }

  /**
   * Gets the value of the 'quote_count' field.
   * @return The value of the 'quote_count' field.
   */
  public int getQuoteCount() {
    return quote_count;
  }


  /**
   * Sets the value of the 'quote_count' field.
   * @param value the value to set.
   */
  public void setQuoteCount(int value) {
    this.quote_count = value;
  }

  /**
   * Gets the value of the 'reply_count' field.
   * @return The value of the 'reply_count' field.
   */
  public int getReplyCount() {
    return reply_count;
  }


  /**
   * Sets the value of the 'reply_count' field.
   * @param value the value to set.
   */
  public void setReplyCount(int value) {
    this.reply_count = value;
  }

  /**
   * Gets the value of the 'retweet_count' field.
   * @return The value of the 'retweet_count' field.
   */
  public int getRetweetCount() {
    return retweet_count;
  }


  /**
   * Sets the value of the 'retweet_count' field.
   * @param value the value to set.
   */
  public void setRetweetCount(int value) {
    this.retweet_count = value;
  }

  /**
   * Gets the value of the 'favorite_count' field.
   * @return The value of the 'favorite_count' field.
   */
  public int getFavoriteCount() {
    return favorite_count;
  }


  /**
   * Sets the value of the 'favorite_count' field.
   * @param value the value to set.
   */
  public void setFavoriteCount(int value) {
    this.favorite_count = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static com.habjan.model.Tweet.Builder newBuilder() {
    return new com.habjan.model.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static com.habjan.model.Tweet.Builder newBuilder(com.habjan.model.Tweet.Builder other) {
    if (other == null) {
      return new com.habjan.model.Tweet.Builder();
    } else {
      return new com.habjan.model.Tweet.Builder(other);
    }
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static com.habjan.model.Tweet.Builder newBuilder(com.habjan.model.Tweet other) {
    if (other == null) {
      return new com.habjan.model.Tweet.Builder();
    } else {
      return new com.habjan.model.Tweet.Builder(other);
    }
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private long id;
    private java.lang.CharSequence created_at;
    private long user_id;
    private java.lang.CharSequence username;
    private java.lang.CharSequence text;
    private int quote_count;
    private int reply_count;
    private int retweet_count;
    private int favorite_count;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.habjan.model.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.username)) {
        this.username = data().deepCopy(fields()[3].schema(), other.username);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.quote_count)) {
        this.quote_count = data().deepCopy(fields()[5].schema(), other.quote_count);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.reply_count)) {
        this.reply_count = data().deepCopy(fields()[6].schema(), other.reply_count);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.retweet_count)) {
        this.retweet_count = data().deepCopy(fields()[7].schema(), other.retweet_count);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.favorite_count)) {
        this.favorite_count = data().deepCopy(fields()[8].schema(), other.favorite_count);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(com.habjan.model.Tweet other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created_at)) {
        this.created_at = data().deepCopy(fields()[1].schema(), other.created_at);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.username)) {
        this.username = data().deepCopy(fields()[3].schema(), other.username);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.text)) {
        this.text = data().deepCopy(fields()[4].schema(), other.text);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quote_count)) {
        this.quote_count = data().deepCopy(fields()[5].schema(), other.quote_count);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.reply_count)) {
        this.reply_count = data().deepCopy(fields()[6].schema(), other.reply_count);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.retweet_count)) {
        this.retweet_count = data().deepCopy(fields()[7].schema(), other.retweet_count);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.favorite_count)) {
        this.favorite_count = data().deepCopy(fields()[8].schema(), other.favorite_count);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.created_at = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public long getUserId() {
      return user_id;
    }


    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setUserId(long value) {
      validate(fields()[2], value);
      this.user_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearUserId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.username = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearUsername() {
      username = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'text' field.
      * @return The value.
      */
    public java.lang.CharSequence getText() {
      return text;
    }


    /**
      * Sets the value of the 'text' field.
      * @param value The value of 'text'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setText(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.text = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'text' field has been set.
      * @return True if the 'text' field has been set, false otherwise.
      */
    public boolean hasText() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'text' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearText() {
      text = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quote_count' field.
      * @return The value.
      */
    public int getQuoteCount() {
      return quote_count;
    }


    /**
      * Sets the value of the 'quote_count' field.
      * @param value The value of 'quote_count'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setQuoteCount(int value) {
      validate(fields()[5], value);
      this.quote_count = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quote_count' field has been set.
      * @return True if the 'quote_count' field has been set, false otherwise.
      */
    public boolean hasQuoteCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quote_count' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearQuoteCount() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'reply_count' field.
      * @return The value.
      */
    public int getReplyCount() {
      return reply_count;
    }


    /**
      * Sets the value of the 'reply_count' field.
      * @param value The value of 'reply_count'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setReplyCount(int value) {
      validate(fields()[6], value);
      this.reply_count = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'reply_count' field has been set.
      * @return True if the 'reply_count' field has been set, false otherwise.
      */
    public boolean hasReplyCount() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'reply_count' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearReplyCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'retweet_count' field.
      * @return The value.
      */
    public int getRetweetCount() {
      return retweet_count;
    }


    /**
      * Sets the value of the 'retweet_count' field.
      * @param value The value of 'retweet_count'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setRetweetCount(int value) {
      validate(fields()[7], value);
      this.retweet_count = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'retweet_count' field has been set.
      * @return True if the 'retweet_count' field has been set, false otherwise.
      */
    public boolean hasRetweetCount() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'retweet_count' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearRetweetCount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'favorite_count' field.
      * @return The value.
      */
    public int getFavoriteCount() {
      return favorite_count;
    }


    /**
      * Sets the value of the 'favorite_count' field.
      * @param value The value of 'favorite_count'.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder setFavoriteCount(int value) {
      validate(fields()[8], value);
      this.favorite_count = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'favorite_count' field has been set.
      * @return True if the 'favorite_count' field has been set, false otherwise.
      */
    public boolean hasFavoriteCount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'favorite_count' field.
      * @return This builder.
      */
    public com.habjan.model.Tweet.Builder clearFavoriteCount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.created_at = fieldSetFlags()[1] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.user_id = fieldSetFlags()[2] ? this.user_id : (java.lang.Long) defaultValue(fields()[2]);
        record.username = fieldSetFlags()[3] ? this.username : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.text = fieldSetFlags()[4] ? this.text : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.quote_count = fieldSetFlags()[5] ? this.quote_count : (java.lang.Integer) defaultValue(fields()[5]);
        record.reply_count = fieldSetFlags()[6] ? this.reply_count : (java.lang.Integer) defaultValue(fields()[6]);
        record.retweet_count = fieldSetFlags()[7] ? this.retweet_count : (java.lang.Integer) defaultValue(fields()[7]);
        record.favorite_count = fieldSetFlags()[8] ? this.favorite_count : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tweet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tweet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tweet>
    READER$ = (org.apache.avro.io.DatumReader<Tweet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeString(this.created_at);

    out.writeLong(this.user_id);

    out.writeString(this.username);

    out.writeString(this.text);

    out.writeInt(this.quote_count);

    out.writeInt(this.reply_count);

    out.writeInt(this.retweet_count);

    out.writeInt(this.favorite_count);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.created_at = in.readString(this.created_at instanceof Utf8 ? (Utf8)this.created_at : null);

      this.user_id = in.readLong();

      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);

      this.quote_count = in.readInt();

      this.reply_count = in.readInt();

      this.retweet_count = in.readInt();

      this.favorite_count = in.readInt();

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.created_at = in.readString(this.created_at instanceof Utf8 ? (Utf8)this.created_at : null);
          break;

        case 2:
          this.user_id = in.readLong();
          break;

        case 3:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 4:
          this.text = in.readString(this.text instanceof Utf8 ? (Utf8)this.text : null);
          break;

        case 5:
          this.quote_count = in.readInt();
          break;

        case 6:
          this.reply_count = in.readInt();
          break;

        case 7:
          this.retweet_count = in.readInt();
          break;

        case 8:
          this.favorite_count = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










